# Re-invoke the configure script
# and keep the output at bay.
if [ $# -ne 1 -o "$1" != "quiet" ];
then
  $0 "quiet" > /dev/null
  exit $?
fi

# Exit on errors
set -o errexit
# Exit if we try to use an unbound variable
set -o nounset

# Determine system
UNAME_LINUX=0
UNAME_CYGWIN=0
UNAME_OSX=0
UNAME=$(uname)
if [ "$UNAME" = "Linux" ];
then
  UNAME_LINUX=1
elif [ "$UNAME" = "Darwin" ];
then
  UNAME_OSX=1
elif [ "$(uname -o)" = "Cygwin" ];
then
  UNAME_CYGWIN=1
else
  echo "Invalid uname ($UNAME): Unsuppported platform" 1>&2
  exit 1
fi

# Colors
COLOR_OFF=$(tput sgr0)
COLOR_RED=$(tput setaf 1)
COLOR_YELLOW=$(tput setaf 3)
COLOR_GREEN=$(tput setaf 2)

# Output colorizing
ECHO_PREFIX=$COLOR_GREEN"»»»"$COLOR_OFF
if [ "$UNAME" = "Linux" ];
then
  ECHO="echo -e $ECHO_PREFIX"
else
  ECHO="echo $ECHO_PREFIX"
fi

log() { $ECHO "$@" 1>&2; }

PROJECT=clam
log "Configuring ${PROJECT}"

CXX_PLATFORM_FLAGS=
LD_PLATFORM_LIBS=
if [ "1" -eq "$UNAME_LINUX" ];
then
  log "Platform: Linux"
elif [ "1" -eq "$UNAME_OSX" ];
then
  log "Platform: OSX"
  CXX_PLATFORM_FLAGS=-stdlib=libc++
  LD_PLATFORM_LIBS=-lc++
elif [ "1" -eq "$UNAME_CYGWIN" ];
then
  log "Platform: Cygwin"
fi

# Configure the makefile
log "Building Makefile"
rm -f Makefile
sed "s#%CXX_PLATFORM_FLAGS_IN%#${CXX_PLATFORM_FLAGS}#" ./Makefile.in > ./Makefile.tmp
sed "s#%LD_PLATFORM_LIBS_IN%#${LD_PLATFORM_LIBS}#" ./Makefile.tmp > ./Makefile

log "Done configuring ${PROJECT}"
